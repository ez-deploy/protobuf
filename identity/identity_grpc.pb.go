// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: identity/identity.proto

package identity

import (
	context "context"
	model "github.com/ez-deploy/protobuf/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IdentityOpsClient is the client API for IdentityOps service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IdentityOpsClient interface {
	// Register by email and password.
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*model.CommonResp, error)
	// Login by email and password.
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	// Verify by session_token.
	Verify(ctx context.Context, in *VerifyReq, opts ...grpc.CallOption) (*VerifyResp, error)
	// generate private_token.
	ReGeneratePrivateToken(ctx context.Context, in *model.Identity, opts ...grpc.CallOption) (*model.CommonResp, error)
	// get private_token.
	GetPrivateToken(ctx context.Context, in *model.Identity, opts ...grpc.CallOption) (*model.Token, error)
	// generate public_token.
	GeneratePublicToken(ctx context.Context, in *GeneratePublicTokenReq, opts ...grpc.CallOption) (*model.CommonResp, error)
	// list user's public_tokens.
	ListPublicToken(ctx context.Context, in *model.Identity, opts ...grpc.CallOption) (*ListPublicTokenResp, error)
	// delete public_token.
	DeletePublicToken(ctx context.Context, in *DeletePublicTokenReq, opts ...grpc.CallOption) (*model.CommonResp, error)
}

type identityOpsClient struct {
	cc grpc.ClientConnInterface
}

func NewIdentityOpsClient(cc grpc.ClientConnInterface) IdentityOpsClient {
	return &identityOpsClient{cc}
}

func (c *identityOpsClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*model.CommonResp, error) {
	out := new(model.CommonResp)
	err := c.cc.Invoke(ctx, "/identity.IdentityOps/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityOpsClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, "/identity.IdentityOps/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityOpsClient) Verify(ctx context.Context, in *VerifyReq, opts ...grpc.CallOption) (*VerifyResp, error) {
	out := new(VerifyResp)
	err := c.cc.Invoke(ctx, "/identity.IdentityOps/Verify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityOpsClient) ReGeneratePrivateToken(ctx context.Context, in *model.Identity, opts ...grpc.CallOption) (*model.CommonResp, error) {
	out := new(model.CommonResp)
	err := c.cc.Invoke(ctx, "/identity.IdentityOps/ReGeneratePrivateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityOpsClient) GetPrivateToken(ctx context.Context, in *model.Identity, opts ...grpc.CallOption) (*model.Token, error) {
	out := new(model.Token)
	err := c.cc.Invoke(ctx, "/identity.IdentityOps/GetPrivateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityOpsClient) GeneratePublicToken(ctx context.Context, in *GeneratePublicTokenReq, opts ...grpc.CallOption) (*model.CommonResp, error) {
	out := new(model.CommonResp)
	err := c.cc.Invoke(ctx, "/identity.IdentityOps/GeneratePublicToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityOpsClient) ListPublicToken(ctx context.Context, in *model.Identity, opts ...grpc.CallOption) (*ListPublicTokenResp, error) {
	out := new(ListPublicTokenResp)
	err := c.cc.Invoke(ctx, "/identity.IdentityOps/ListPublicToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityOpsClient) DeletePublicToken(ctx context.Context, in *DeletePublicTokenReq, opts ...grpc.CallOption) (*model.CommonResp, error) {
	out := new(model.CommonResp)
	err := c.cc.Invoke(ctx, "/identity.IdentityOps/DeletePublicToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdentityOpsServer is the server API for IdentityOps service.
// All implementations must embed UnimplementedIdentityOpsServer
// for forward compatibility
type IdentityOpsServer interface {
	// Register by email and password.
	Register(context.Context, *RegisterReq) (*model.CommonResp, error)
	// Login by email and password.
	Login(context.Context, *LoginReq) (*LoginResp, error)
	// Verify by session_token.
	Verify(context.Context, *VerifyReq) (*VerifyResp, error)
	// generate private_token.
	ReGeneratePrivateToken(context.Context, *model.Identity) (*model.CommonResp, error)
	// get private_token.
	GetPrivateToken(context.Context, *model.Identity) (*model.Token, error)
	// generate public_token.
	GeneratePublicToken(context.Context, *GeneratePublicTokenReq) (*model.CommonResp, error)
	// list user's public_tokens.
	ListPublicToken(context.Context, *model.Identity) (*ListPublicTokenResp, error)
	// delete public_token.
	DeletePublicToken(context.Context, *DeletePublicTokenReq) (*model.CommonResp, error)
	mustEmbedUnimplementedIdentityOpsServer()
}

// UnimplementedIdentityOpsServer must be embedded to have forward compatible implementations.
type UnimplementedIdentityOpsServer struct {
}

func (UnimplementedIdentityOpsServer) Register(context.Context, *RegisterReq) (*model.CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedIdentityOpsServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedIdentityOpsServer) Verify(context.Context, *VerifyReq) (*VerifyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}
func (UnimplementedIdentityOpsServer) ReGeneratePrivateToken(context.Context, *model.Identity) (*model.CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReGeneratePrivateToken not implemented")
}
func (UnimplementedIdentityOpsServer) GetPrivateToken(context.Context, *model.Identity) (*model.Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrivateToken not implemented")
}
func (UnimplementedIdentityOpsServer) GeneratePublicToken(context.Context, *GeneratePublicTokenReq) (*model.CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GeneratePublicToken not implemented")
}
func (UnimplementedIdentityOpsServer) ListPublicToken(context.Context, *model.Identity) (*ListPublicTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPublicToken not implemented")
}
func (UnimplementedIdentityOpsServer) DeletePublicToken(context.Context, *DeletePublicTokenReq) (*model.CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePublicToken not implemented")
}
func (UnimplementedIdentityOpsServer) mustEmbedUnimplementedIdentityOpsServer() {}

// UnsafeIdentityOpsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IdentityOpsServer will
// result in compilation errors.
type UnsafeIdentityOpsServer interface {
	mustEmbedUnimplementedIdentityOpsServer()
}

func RegisterIdentityOpsServer(s grpc.ServiceRegistrar, srv IdentityOpsServer) {
	s.RegisterService(&IdentityOps_ServiceDesc, srv)
}

func _IdentityOps_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityOpsServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/identity.IdentityOps/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityOpsServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityOps_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityOpsServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/identity.IdentityOps/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityOpsServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityOps_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityOpsServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/identity.IdentityOps/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityOpsServer).Verify(ctx, req.(*VerifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityOps_ReGeneratePrivateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.Identity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityOpsServer).ReGeneratePrivateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/identity.IdentityOps/ReGeneratePrivateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityOpsServer).ReGeneratePrivateToken(ctx, req.(*model.Identity))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityOps_GetPrivateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.Identity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityOpsServer).GetPrivateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/identity.IdentityOps/GetPrivateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityOpsServer).GetPrivateToken(ctx, req.(*model.Identity))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityOps_GeneratePublicToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeneratePublicTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityOpsServer).GeneratePublicToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/identity.IdentityOps/GeneratePublicToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityOpsServer).GeneratePublicToken(ctx, req.(*GeneratePublicTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityOps_ListPublicToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.Identity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityOpsServer).ListPublicToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/identity.IdentityOps/ListPublicToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityOpsServer).ListPublicToken(ctx, req.(*model.Identity))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityOps_DeletePublicToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePublicTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityOpsServer).DeletePublicToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/identity.IdentityOps/DeletePublicToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityOpsServer).DeletePublicToken(ctx, req.(*DeletePublicTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

// IdentityOps_ServiceDesc is the grpc.ServiceDesc for IdentityOps service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IdentityOps_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "identity.IdentityOps",
	HandlerType: (*IdentityOpsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _IdentityOps_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _IdentityOps_Login_Handler,
		},
		{
			MethodName: "Verify",
			Handler:    _IdentityOps_Verify_Handler,
		},
		{
			MethodName: "ReGeneratePrivateToken",
			Handler:    _IdentityOps_ReGeneratePrivateToken_Handler,
		},
		{
			MethodName: "GetPrivateToken",
			Handler:    _IdentityOps_GetPrivateToken_Handler,
		},
		{
			MethodName: "GeneratePublicToken",
			Handler:    _IdentityOps_GeneratePublicToken_Handler,
		},
		{
			MethodName: "ListPublicToken",
			Handler:    _IdentityOps_ListPublicToken_Handler,
		},
		{
			MethodName: "DeletePublicToken",
			Handler:    _IdentityOps_DeletePublicToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "identity/identity.proto",
}
