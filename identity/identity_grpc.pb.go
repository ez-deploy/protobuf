// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package identity

import (
	context "context"
	model "gitee.com/ez-deploy/protobuf/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OpsClient is the client API for Ops service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OpsClient interface {
	// Register by email and password.
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*model.CommonResp, error)
	// Login by email and password.
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	// Verify by session_token.
	Verify(ctx context.Context, in *VerifyReq, opts ...grpc.CallOption) (*VerifyResp, error)
	// generate private_token.
	ReGeneratePrivateToken(ctx context.Context, in *model.Identity, opts ...grpc.CallOption) (*model.CommonResp, error)
	// get private_token.
	GetPrivateToken(ctx context.Context, in *model.Identity, opts ...grpc.CallOption) (*model.Token, error)
	// generate public_token.
	GeneratePublicToken(ctx context.Context, in *GeneratePublicTokenReq, opts ...grpc.CallOption) (*model.CommonResp, error)
	// list user's public_tokens.
	ListPublicToken(ctx context.Context, in *model.Identity, opts ...grpc.CallOption) (*ListPublicTokenResp, error)
	// delete public_token.
	DeletePublicToken(ctx context.Context, in *DeletePublicTokenReq, opts ...grpc.CallOption) (*model.CommonResp, error)
}

type opsClient struct {
	cc grpc.ClientConnInterface
}

func NewOpsClient(cc grpc.ClientConnInterface) OpsClient {
	return &opsClient{cc}
}

func (c *opsClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*model.CommonResp, error) {
	out := new(model.CommonResp)
	err := c.cc.Invoke(ctx, "/Ops/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opsClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, "/Ops/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opsClient) Verify(ctx context.Context, in *VerifyReq, opts ...grpc.CallOption) (*VerifyResp, error) {
	out := new(VerifyResp)
	err := c.cc.Invoke(ctx, "/Ops/Verify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opsClient) ReGeneratePrivateToken(ctx context.Context, in *model.Identity, opts ...grpc.CallOption) (*model.CommonResp, error) {
	out := new(model.CommonResp)
	err := c.cc.Invoke(ctx, "/Ops/ReGeneratePrivateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opsClient) GetPrivateToken(ctx context.Context, in *model.Identity, opts ...grpc.CallOption) (*model.Token, error) {
	out := new(model.Token)
	err := c.cc.Invoke(ctx, "/Ops/GetPrivateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opsClient) GeneratePublicToken(ctx context.Context, in *GeneratePublicTokenReq, opts ...grpc.CallOption) (*model.CommonResp, error) {
	out := new(model.CommonResp)
	err := c.cc.Invoke(ctx, "/Ops/GeneratePublicToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opsClient) ListPublicToken(ctx context.Context, in *model.Identity, opts ...grpc.CallOption) (*ListPublicTokenResp, error) {
	out := new(ListPublicTokenResp)
	err := c.cc.Invoke(ctx, "/Ops/ListPublicToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opsClient) DeletePublicToken(ctx context.Context, in *DeletePublicTokenReq, opts ...grpc.CallOption) (*model.CommonResp, error) {
	out := new(model.CommonResp)
	err := c.cc.Invoke(ctx, "/Ops/DeletePublicToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpsServer is the server API for Ops service.
// All implementations must embed UnimplementedOpsServer
// for forward compatibility
type OpsServer interface {
	// Register by email and password.
	Register(context.Context, *RegisterReq) (*model.CommonResp, error)
	// Login by email and password.
	Login(context.Context, *LoginReq) (*LoginResp, error)
	// Verify by session_token.
	Verify(context.Context, *VerifyReq) (*VerifyResp, error)
	// generate private_token.
	ReGeneratePrivateToken(context.Context, *model.Identity) (*model.CommonResp, error)
	// get private_token.
	GetPrivateToken(context.Context, *model.Identity) (*model.Token, error)
	// generate public_token.
	GeneratePublicToken(context.Context, *GeneratePublicTokenReq) (*model.CommonResp, error)
	// list user's public_tokens.
	ListPublicToken(context.Context, *model.Identity) (*ListPublicTokenResp, error)
	// delete public_token.
	DeletePublicToken(context.Context, *DeletePublicTokenReq) (*model.CommonResp, error)
	mustEmbedUnimplementedOpsServer()
}

// UnimplementedOpsServer must be embedded to have forward compatible implementations.
type UnimplementedOpsServer struct {
}

func (UnimplementedOpsServer) Register(context.Context, *RegisterReq) (*model.CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedOpsServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedOpsServer) Verify(context.Context, *VerifyReq) (*VerifyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}
func (UnimplementedOpsServer) ReGeneratePrivateToken(context.Context, *model.Identity) (*model.CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReGeneratePrivateToken not implemented")
}
func (UnimplementedOpsServer) GetPrivateToken(context.Context, *model.Identity) (*model.Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrivateToken not implemented")
}
func (UnimplementedOpsServer) GeneratePublicToken(context.Context, *GeneratePublicTokenReq) (*model.CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GeneratePublicToken not implemented")
}
func (UnimplementedOpsServer) ListPublicToken(context.Context, *model.Identity) (*ListPublicTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPublicToken not implemented")
}
func (UnimplementedOpsServer) DeletePublicToken(context.Context, *DeletePublicTokenReq) (*model.CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePublicToken not implemented")
}
func (UnimplementedOpsServer) mustEmbedUnimplementedOpsServer() {}

// UnsafeOpsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpsServer will
// result in compilation errors.
type UnsafeOpsServer interface {
	mustEmbedUnimplementedOpsServer()
}

func RegisterOpsServer(s grpc.ServiceRegistrar, srv OpsServer) {
	s.RegisterService(&Ops_ServiceDesc, srv)
}

func _Ops_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpsServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Ops/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpsServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ops_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpsServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Ops/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpsServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ops_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpsServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Ops/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpsServer).Verify(ctx, req.(*VerifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ops_ReGeneratePrivateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.Identity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpsServer).ReGeneratePrivateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Ops/ReGeneratePrivateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpsServer).ReGeneratePrivateToken(ctx, req.(*model.Identity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ops_GetPrivateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.Identity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpsServer).GetPrivateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Ops/GetPrivateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpsServer).GetPrivateToken(ctx, req.(*model.Identity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ops_GeneratePublicToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeneratePublicTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpsServer).GeneratePublicToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Ops/GeneratePublicToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpsServer).GeneratePublicToken(ctx, req.(*GeneratePublicTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ops_ListPublicToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.Identity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpsServer).ListPublicToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Ops/ListPublicToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpsServer).ListPublicToken(ctx, req.(*model.Identity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ops_DeletePublicToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePublicTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpsServer).DeletePublicToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Ops/DeletePublicToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpsServer).DeletePublicToken(ctx, req.(*DeletePublicTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Ops_ServiceDesc is the grpc.ServiceDesc for Ops service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ops_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Ops",
	HandlerType: (*OpsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Ops_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Ops_Login_Handler,
		},
		{
			MethodName: "Verify",
			Handler:    _Ops_Verify_Handler,
		},
		{
			MethodName: "ReGeneratePrivateToken",
			Handler:    _Ops_ReGeneratePrivateToken_Handler,
		},
		{
			MethodName: "GetPrivateToken",
			Handler:    _Ops_GetPrivateToken_Handler,
		},
		{
			MethodName: "GeneratePublicToken",
			Handler:    _Ops_GeneratePublicToken_Handler,
		},
		{
			MethodName: "ListPublicToken",
			Handler:    _Ops_ListPublicToken_Handler,
		},
		{
			MethodName: "DeletePublicToken",
			Handler:    _Ops_DeletePublicToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "identity/identity.proto",
}
