// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: project/project.proto

package project

import (
	context "context"
	model "github.com/ez-deploy/protobuf/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProjectOpsClient is the client API for ProjectOps service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectOpsClient interface {
	CreateProject(ctx context.Context, in *CreateProjectReq, opts ...grpc.CallOption) (*model.CommonResp, error)
	DeleteProject(ctx context.Context, in *DeleteProjectReq, opts ...grpc.CallOption) (*model.CommonResp, error)
	SetService(ctx context.Context, in *SetServiceReq, opts ...grpc.CallOption) (*model.CommonResp, error)
	GetService(ctx context.Context, in *GetServiceReq, opts ...grpc.CallOption) (*GetServiceResp, error)
	ListService(ctx context.Context, in *ListServiceReq, opts ...grpc.CallOption) (*ListServiceResp, error)
	DeleteService(ctx context.Context, in *DeleteServiceReq, opts ...grpc.CallOption) (*model.CommonResp, error)
	ListPods(ctx context.Context, in *ListPodsReq, opts ...grpc.CallOption) (*ListPodsResp, error)
}

type projectOpsClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectOpsClient(cc grpc.ClientConnInterface) ProjectOpsClient {
	return &projectOpsClient{cc}
}

func (c *projectOpsClient) CreateProject(ctx context.Context, in *CreateProjectReq, opts ...grpc.CallOption) (*model.CommonResp, error) {
	out := new(model.CommonResp)
	err := c.cc.Invoke(ctx, "/project.ProjectOps/CreateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectOpsClient) DeleteProject(ctx context.Context, in *DeleteProjectReq, opts ...grpc.CallOption) (*model.CommonResp, error) {
	out := new(model.CommonResp)
	err := c.cc.Invoke(ctx, "/project.ProjectOps/DeleteProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectOpsClient) SetService(ctx context.Context, in *SetServiceReq, opts ...grpc.CallOption) (*model.CommonResp, error) {
	out := new(model.CommonResp)
	err := c.cc.Invoke(ctx, "/project.ProjectOps/SetService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectOpsClient) GetService(ctx context.Context, in *GetServiceReq, opts ...grpc.CallOption) (*GetServiceResp, error) {
	out := new(GetServiceResp)
	err := c.cc.Invoke(ctx, "/project.ProjectOps/GetService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectOpsClient) ListService(ctx context.Context, in *ListServiceReq, opts ...grpc.CallOption) (*ListServiceResp, error) {
	out := new(ListServiceResp)
	err := c.cc.Invoke(ctx, "/project.ProjectOps/ListService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectOpsClient) DeleteService(ctx context.Context, in *DeleteServiceReq, opts ...grpc.CallOption) (*model.CommonResp, error) {
	out := new(model.CommonResp)
	err := c.cc.Invoke(ctx, "/project.ProjectOps/DeleteService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectOpsClient) ListPods(ctx context.Context, in *ListPodsReq, opts ...grpc.CallOption) (*ListPodsResp, error) {
	out := new(ListPodsResp)
	err := c.cc.Invoke(ctx, "/project.ProjectOps/ListPods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectOpsServer is the server API for ProjectOps service.
// All implementations must embed UnimplementedProjectOpsServer
// for forward compatibility
type ProjectOpsServer interface {
	CreateProject(context.Context, *CreateProjectReq) (*model.CommonResp, error)
	DeleteProject(context.Context, *DeleteProjectReq) (*model.CommonResp, error)
	SetService(context.Context, *SetServiceReq) (*model.CommonResp, error)
	GetService(context.Context, *GetServiceReq) (*GetServiceResp, error)
	ListService(context.Context, *ListServiceReq) (*ListServiceResp, error)
	DeleteService(context.Context, *DeleteServiceReq) (*model.CommonResp, error)
	ListPods(context.Context, *ListPodsReq) (*ListPodsResp, error)
	mustEmbedUnimplementedProjectOpsServer()
}

// UnimplementedProjectOpsServer must be embedded to have forward compatible implementations.
type UnimplementedProjectOpsServer struct {
}

func (UnimplementedProjectOpsServer) CreateProject(context.Context, *CreateProjectReq) (*model.CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (UnimplementedProjectOpsServer) DeleteProject(context.Context, *DeleteProjectReq) (*model.CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProject not implemented")
}
func (UnimplementedProjectOpsServer) SetService(context.Context, *SetServiceReq) (*model.CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetService not implemented")
}
func (UnimplementedProjectOpsServer) GetService(context.Context, *GetServiceReq) (*GetServiceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetService not implemented")
}
func (UnimplementedProjectOpsServer) ListService(context.Context, *ListServiceReq) (*ListServiceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListService not implemented")
}
func (UnimplementedProjectOpsServer) DeleteService(context.Context, *DeleteServiceReq) (*model.CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteService not implemented")
}
func (UnimplementedProjectOpsServer) ListPods(context.Context, *ListPodsReq) (*ListPodsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPods not implemented")
}
func (UnimplementedProjectOpsServer) mustEmbedUnimplementedProjectOpsServer() {}

// UnsafeProjectOpsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectOpsServer will
// result in compilation errors.
type UnsafeProjectOpsServer interface {
	mustEmbedUnimplementedProjectOpsServer()
}

func RegisterProjectOpsServer(s grpc.ServiceRegistrar, srv ProjectOpsServer) {
	s.RegisterService(&ProjectOps_ServiceDesc, srv)
}

func _ProjectOps_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectOpsServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.ProjectOps/CreateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectOpsServer).CreateProject(ctx, req.(*CreateProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectOps_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectOpsServer).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.ProjectOps/DeleteProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectOpsServer).DeleteProject(ctx, req.(*DeleteProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectOps_SetService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetServiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectOpsServer).SetService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.ProjectOps/SetService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectOpsServer).SetService(ctx, req.(*SetServiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectOps_GetService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectOpsServer).GetService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.ProjectOps/GetService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectOpsServer).GetService(ctx, req.(*GetServiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectOps_ListService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectOpsServer).ListService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.ProjectOps/ListService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectOpsServer).ListService(ctx, req.(*ListServiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectOps_DeleteService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectOpsServer).DeleteService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.ProjectOps/DeleteService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectOpsServer).DeleteService(ctx, req.(*DeleteServiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectOps_ListPods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPodsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectOpsServer).ListPods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.ProjectOps/ListPods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectOpsServer).ListPods(ctx, req.(*ListPodsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectOps_ServiceDesc is the grpc.ServiceDesc for ProjectOps service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectOps_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "project.ProjectOps",
	HandlerType: (*ProjectOpsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProject",
			Handler:    _ProjectOps_CreateProject_Handler,
		},
		{
			MethodName: "DeleteProject",
			Handler:    _ProjectOps_DeleteProject_Handler,
		},
		{
			MethodName: "SetService",
			Handler:    _ProjectOps_SetService_Handler,
		},
		{
			MethodName: "GetService",
			Handler:    _ProjectOps_GetService_Handler,
		},
		{
			MethodName: "ListService",
			Handler:    _ProjectOps_ListService_Handler,
		},
		{
			MethodName: "DeleteService",
			Handler:    _ProjectOps_DeleteService_Handler,
		},
		{
			MethodName: "ListPods",
			Handler:    _ProjectOps_ListPods_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "project/project.proto",
}
