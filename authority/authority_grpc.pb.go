// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: authority/authority.proto

package authority

import (
	context "context"
	model "github.com/ez-deploy/protobuf/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthorityOpsClient is the client API for AuthorityOps service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthorityOpsClient interface {
	SetAuthorities(ctx context.Context, in *Authorities, opts ...grpc.CallOption) (*model.CommonResp, error)
	ListAuthoritiesByIdentity(ctx context.Context, in *model.Identity, opts ...grpc.CallOption) (*ListAuthoritiesResp, error)
	ListAuthoritiesByResource(ctx context.Context, in *model.Resource, opts ...grpc.CallOption) (*ListAuthoritiesResp, error)
	DeleteAuthorities(ctx context.Context, in *Authorities, opts ...grpc.CallOption) (*DeleteAuthoritiesResp, error)
}

type authorityOpsClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorityOpsClient(cc grpc.ClientConnInterface) AuthorityOpsClient {
	return &authorityOpsClient{cc}
}

func (c *authorityOpsClient) SetAuthorities(ctx context.Context, in *Authorities, opts ...grpc.CallOption) (*model.CommonResp, error) {
	out := new(model.CommonResp)
	err := c.cc.Invoke(ctx, "/authority.AuthorityOps/SetAuthorities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityOpsClient) ListAuthoritiesByIdentity(ctx context.Context, in *model.Identity, opts ...grpc.CallOption) (*ListAuthoritiesResp, error) {
	out := new(ListAuthoritiesResp)
	err := c.cc.Invoke(ctx, "/authority.AuthorityOps/ListAuthoritiesByIdentity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityOpsClient) ListAuthoritiesByResource(ctx context.Context, in *model.Resource, opts ...grpc.CallOption) (*ListAuthoritiesResp, error) {
	out := new(ListAuthoritiesResp)
	err := c.cc.Invoke(ctx, "/authority.AuthorityOps/ListAuthoritiesByResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityOpsClient) DeleteAuthorities(ctx context.Context, in *Authorities, opts ...grpc.CallOption) (*DeleteAuthoritiesResp, error) {
	out := new(DeleteAuthoritiesResp)
	err := c.cc.Invoke(ctx, "/authority.AuthorityOps/DeleteAuthorities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorityOpsServer is the server API for AuthorityOps service.
// All implementations must embed UnimplementedAuthorityOpsServer
// for forward compatibility
type AuthorityOpsServer interface {
	SetAuthorities(context.Context, *Authorities) (*model.CommonResp, error)
	ListAuthoritiesByIdentity(context.Context, *model.Identity) (*ListAuthoritiesResp, error)
	ListAuthoritiesByResource(context.Context, *model.Resource) (*ListAuthoritiesResp, error)
	DeleteAuthorities(context.Context, *Authorities) (*DeleteAuthoritiesResp, error)
	mustEmbedUnimplementedAuthorityOpsServer()
}

// UnimplementedAuthorityOpsServer must be embedded to have forward compatible implementations.
type UnimplementedAuthorityOpsServer struct {
}

func (UnimplementedAuthorityOpsServer) SetAuthorities(context.Context, *Authorities) (*model.CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAuthorities not implemented")
}
func (UnimplementedAuthorityOpsServer) ListAuthoritiesByIdentity(context.Context, *model.Identity) (*ListAuthoritiesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuthoritiesByIdentity not implemented")
}
func (UnimplementedAuthorityOpsServer) ListAuthoritiesByResource(context.Context, *model.Resource) (*ListAuthoritiesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAuthoritiesByResource not implemented")
}
func (UnimplementedAuthorityOpsServer) DeleteAuthorities(context.Context, *Authorities) (*DeleteAuthoritiesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAuthorities not implemented")
}
func (UnimplementedAuthorityOpsServer) mustEmbedUnimplementedAuthorityOpsServer() {}

// UnsafeAuthorityOpsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthorityOpsServer will
// result in compilation errors.
type UnsafeAuthorityOpsServer interface {
	mustEmbedUnimplementedAuthorityOpsServer()
}

func RegisterAuthorityOpsServer(s grpc.ServiceRegistrar, srv AuthorityOpsServer) {
	s.RegisterService(&AuthorityOps_ServiceDesc, srv)
}

func _AuthorityOps_SetAuthorities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Authorities)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityOpsServer).SetAuthorities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authority.AuthorityOps/SetAuthorities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityOpsServer).SetAuthorities(ctx, req.(*Authorities))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorityOps_ListAuthoritiesByIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.Identity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityOpsServer).ListAuthoritiesByIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authority.AuthorityOps/ListAuthoritiesByIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityOpsServer).ListAuthoritiesByIdentity(ctx, req.(*model.Identity))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorityOps_ListAuthoritiesByResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.Resource)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityOpsServer).ListAuthoritiesByResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authority.AuthorityOps/ListAuthoritiesByResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityOpsServer).ListAuthoritiesByResource(ctx, req.(*model.Resource))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorityOps_DeleteAuthorities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Authorities)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityOpsServer).DeleteAuthorities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authority.AuthorityOps/DeleteAuthorities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityOpsServer).DeleteAuthorities(ctx, req.(*Authorities))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthorityOps_ServiceDesc is the grpc.ServiceDesc for AuthorityOps service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthorityOps_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authority.AuthorityOps",
	HandlerType: (*AuthorityOpsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetAuthorities",
			Handler:    _AuthorityOps_SetAuthorities_Handler,
		},
		{
			MethodName: "ListAuthoritiesByIdentity",
			Handler:    _AuthorityOps_ListAuthoritiesByIdentity_Handler,
		},
		{
			MethodName: "ListAuthoritiesByResource",
			Handler:    _AuthorityOps_ListAuthoritiesByResource_Handler,
		},
		{
			MethodName: "DeleteAuthorities",
			Handler:    _AuthorityOps_DeleteAuthorities_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authority/authority.proto",
}
